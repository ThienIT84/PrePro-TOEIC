import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { CheckCircle, Trophy, Clock, Target, TrendingUp, RotateCcw } from 'lucide-react';

interface SessionResults {
  totalQuestions: number;
  correctAnswers: number;
  timeSpent: number;
  accuracy: number;
  results: Array<{
    itemId: string;
    correct: boolean;
    timeMs: number;
    response: string;
  }>;
}

interface SessionCompleteProps {
  results: SessionResults;
  onNewSession: () => void;
  onReviewMistakes: () => void;
  onBackToDashboard: () => void;
}

const SessionComplete = ({ 
  results, 
  onNewSession, 
  onReviewMistakes, 
  onBackToDashboard 
}: SessionCompleteProps) => {
  const { totalQuestions, correctAnswers, timeSpent, accuracy } = results;
  const wrongAnswers = totalQuestions - correctAnswers;
  const averageTime = timeSpent / totalQuestions / 1000; // seconds per question
  
  const getPerformanceMessage = () => {
    if (accuracy >= 90) return { message: 'Xu·∫•t s·∫Øc!', color: 'text-green-600', icon: Trophy };
    if (accuracy >= 80) return { message: 'R·∫•t t·ªët!', color: 'text-blue-600', icon: CheckCircle };
    if (accuracy >= 70) return { message: 'T·ªët!', color: 'text-orange-600', icon: Target };
    return { message: 'C·∫ßn c·∫£i thi·ªán', color: 'text-red-600', icon: TrendingUp };
  };

  const performance = getPerformanceMessage();
  const PerformanceIcon = performance.icon;

  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      <div className="text-center mb-8">
        <div className="flex justify-center items-center gap-3 mb-4">
          <PerformanceIcon className={`h-8 w-8 ${performance.color}`} />
          <h1 className={`text-3xl font-bold ${performance.color}`}>
            {performance.message}
          </h1>
        </div>
        <p className="text-muted-foreground">
          B·∫°n ƒë√£ ho√†n th√†nh phi√™n luy·ªán t·∫≠p
        </p>
      </div>

      {/* Results Summary */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">T·ªïng c√¢u h·ªèi</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalQuestions}</div>
            <p className="text-xs text-muted-foreground">
              c√¢u ƒë√£ ho√†n th√†nh
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">ƒê·ªô ch√≠nh x√°c</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">{accuracy.toFixed(1)}%</div>
            <Progress value={accuracy} className="h-2 mt-2" />
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">Th·ªùi gian TB</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{averageTime.toFixed(1)}s</div>
            <p className="text-xs text-muted-foreground">
              m·ªói c√¢u h·ªèi
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">T·ªïng th·ªùi gian</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {Math.floor(timeSpent / 60000)}:{((timeSpent % 60000) / 1000).toFixed(0).padStart(2, '0')}
            </div>
            <p className="text-xs text-muted-foreground">
              ph√∫t:gi√¢y
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Detailed Breakdown */}
      <Card className="mb-8">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle className="h-5 w-5 text-primary" />
            Chi ti·∫øt k·∫øt qu·∫£
          </CardTitle>
          <CardDescription>
            Ph√¢n t√≠ch chi ti·∫øt phi√™n luy·ªán t·∫≠p v·ª´a ho√†n th√†nh
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Correct vs Wrong */}
            <div className="space-y-4">
              <h4 className="font-medium">K·∫øt qu·∫£ chi ti·∫øt</h4>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 rounded-full bg-green-500"></div>
                    <span className="text-sm">C√¢u tr·∫£ l·ªùi ƒë√∫ng</span>
                  </div>
                  <Badge variant="secondary">{correctAnswers} c√¢u</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 rounded-full bg-red-500"></div>
                    <span className="text-sm">C√¢u tr·∫£ l·ªùi sai</span>
                  </div>
                  <Badge variant="destructive">{wrongAnswers} c√¢u</Badge>
                </div>
              </div>
            </div>

            {/* Performance Tips */}
            <div className="space-y-4">
              <h4 className="font-medium">L·ªùi khuy√™n</h4>
              <div className="space-y-2 text-sm text-muted-foreground">
                {accuracy >= 90 ? (
                  <p>‚ú® Tuy·ªát v·ªùi! B·∫°n ƒë√£ th√†nh th·∫°o lo·∫°i c√¢u h·ªèi n√†y.</p>
                ) : accuracy >= 80 ? (
                  <p>üéØ K·∫øt qu·∫£ r·∫•t t·ªët! H√£y ti·∫øp t·ª•c duy tr√¨ phong ƒë·ªô.</p>
                ) : accuracy >= 70 ? (
                  <p>üìà B·∫°n ƒëang ti·∫øn b·ªô. H√£y t·∫≠p trung v√†o nh·ªØng c√¢u sai ƒë·ªÉ c·∫£i thi·ªán.</p>
                ) : (
                  <>
                    <p>üí™ ƒê·ª´ng n·∫£n l√≤ng! M·ªói l·∫ßn luy·ªán t·∫≠p ƒë·ªÅu gi√∫p b·∫°n ti·∫øn b·ªô.</p>
                    <p>üìö H√£y √¥n t·∫≠p l·∫°i nh·ªØng c√¢u sai v√† th·ª≠ l·∫°i.</p>
                  </>
                )}
                
                {averageTime > 60 && (
                  <p>‚è±Ô∏è C·ªë g·∫Øng tr·∫£ l·ªùi nhanh h∆°n ƒë·ªÉ tƒÉng ƒë·ªô t·ª± tin trong thi th·∫≠t.</p>
                )}
                
                {wrongAnswers > 0 && (
                  <p>üîÑ Nh·ªØng c√¢u sai s·∫Ω ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng √¥n t·∫≠p ƒë·ªÉ b·∫°n h·ªçc l·∫°i.</p>
                )}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-3 justify-center">
        <Button 
          onClick={onNewSession}
          className="flex-1 max-w-xs"
        >
          <Trophy className="h-4 w-4 mr-2" />
          Luy·ªán t·∫≠p ti·∫øp
        </Button>
        
        {wrongAnswers > 0 && (
          <Button 
            variant="outline"
            onClick={onReviewMistakes}
            className="flex-1 max-w-xs"
          >
            <RotateCcw className="h-4 w-4 mr-2" />
            √în t·∫≠p c√¢u sai ({wrongAnswers})
          </Button>
        )}
        
        <Button 
          variant="secondary"
          onClick={onBackToDashboard}
          className="flex-1 max-w-xs"
        >
          V·ªÅ trang ch·ªß
        </Button>
      </div>
    </div>
  );
};

export default SessionComplete;