import { useState, useEffect, ChangeEvent } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Switch } from '@/components/ui/switch';
import { Checkbox } from '@/components/ui/checkbox';
import { 
  FileText, 
  Upload, 
  Link, 
  Sparkles, 
  Loader2, 
  CheckCircle, 
  AlertCircle,
  Copy,
  Save,
  Eye,
  Trash2,
  Zap,
  Gift,
  Globe,
  Target,
  HelpCircle,
  BookOpen,
  X,
  ChevronDown,
  ChevronUp
} from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { DrillType, Difficulty, Question } from '@/types';
import { questionGeneratorService, GeneratedQuestion } from '@/services/questionGenerator';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/hooks/useAuth';

interface QuestionGeneratorProps {
  onQuestionsGenerated?: (questions: Question[]) => void;
}

const QuestionGenerator = ({ onQuestionsGenerated }: QuestionGeneratorProps) => {
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState<'text' | 'file' | 'url'>('text');
  const [loading, setLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [generatedQuestions, setGeneratedQuestions] = useState<GeneratedQuestion[]>([]);
  const [selectedQuestions, setSelectedQuestions] = useState<Set<number>>(new Set());
  const [error, setError] = useState<string | null>(null);

  // Form state
  const [formData, setFormData] = useState({
    content: '',
    type: 'mix' as DrillType | 'mix',
    difficulty: 'medium' as Difficulty | 'mix',
    questionCount: 5,
    language: 'vi' as 'vi' | 'en',
    part: 5 as number // Part for AI generated questions
  });

  const [file, setFile] = useState<File | null>(null);
  const [url, setUrl] = useState('');
  const [showPromptGuide, setShowPromptGuide] = useState(false);
  const [part6Result, setPart6Result] = useState<{
    passage: { content: string; blanks: number[] };
    questions: GeneratedQuestion[];
  } | null>(null);
  const [part7Result, setPart7Result] = useState<{
    passages: Array<{
      content: string;
      type: string;
      title?: string;
    }>;
    questions: GeneratedQuestion[];
  } | null>(null);
  const [showTemplate, setShowTemplate] = useState(false);
  const [passageCount, setPassageCount] = useState(1);

  // Reset passageCount when changing parts
  useEffect(() => {
    if (formData.part !== 7) {
      setPassageCount(1);
    }
  }, [formData.part]);

  // Get template for each Part
  const getPartTemplate = (part: number) => {
    switch (part) {
      case 5:
        return {
          title: "Part 5 - Incomplete Sentences",
          template: `T·∫°o c√¢u h·ªèi Part 5 TOEIC v·ªõi format sau:

1. Lo·∫°i c√¢u h·ªèi: Incomplete Sentences
2. Ch·ªß ƒë·ªÅ: Business context
3. C·∫•u tr√∫c: C√¢u kh√¥ng ho√†n ch·ªânh v·ªõi 4 l·ª±a ch·ªçn
4. Focus: Grammar, Vocabulary, Prepositions, Conjunctions

Y√™u c·∫ßu:
- Ng·ªØ c·∫£nh kinh doanh th·ª±c t·∫ø
- Ng√¥n ng·ªØ trang tr·ªçng, chuy√™n nghi·ªáp
- 4 l·ª±a ch·ªçn A, B, C, D
- M·ªói c√¢u test m·ªôt k·ªπ nƒÉng kh√°c nhau
- ƒê·ªô d√†i c√¢u v·ª´a ph·∫£i (15-25 t·ª´)
- Gi·∫£i th√≠ch r√µ r√†ng cho ƒë√°p √°n ƒë√∫ng`
        };
      case 6:
        return {
          title: "Part 6 - Text Completion",
          template: `T·∫°o m·ªôt passage Part 6 TOEIC v·ªõi format sau:

1. Lo·∫°i vƒÉn b·∫£n: Report/Email/Memo/Letter
2. Ch·ªß ƒë·ªÅ: Business context
3. C·∫•u tr√∫c: 4 ƒëo·∫°n vƒÉn, 4 ch·ªó tr·ªëng
4. Ch·ªó tr·ªëng 1: Preposition/Time expression
5. Ch·ªó tr·ªëng 2: Conjunction/Reason expression
6. Ch·ªó tr·ªëng 3: Verb/Phrase expression
7. Ch·ªó tr·ªëng 4: Adjective/Adverb expression

Y√™u c·∫ßu:
- Ng·ªØ c·∫£nh kinh doanh th·ª±c t·∫ø
- Ng√¥n ng·ªØ trang tr·ªçng, chuy√™n nghi·ªáp
- 4 ch·ªó tr·ªëng ƒë∆∞·ª£c ƒë√°nh s·ªë 1, 2, 3, 4
- M·ªói ch·ªó tr·ªëng test m·ªôt k·ªπ nƒÉng kh√°c nhau
- Passage d√†i 200-250 t·ª´
- Ph·∫£i ƒë√°nh d·∫•u 4 blank_text trong ƒëo·∫°n vƒÉn`
        };
      case 7:
        return {
          title: "Part 7 - Reading Comprehension",
          template: `T·∫°o Part 7 TOEIC v·ªõi format sau:

1. S·ªë l∆∞·ª£ng passages: 1-3 passages li√™n quan
2. Lo·∫°i vƒÉn b·∫£n: Email/Article/Advertisement/Notice/Memo/Letter
3. Ch·ªß ƒë·ªÅ: Business context (meeting, product, announcement, etc.)
4. C·∫•u tr√∫c: Multiple passages + 2-5 c√¢u h·ªèi
5. C√¢u h·ªèi: Main idea, Detail, Inference, Vocabulary, Purpose

Y√™u c·∫ßu:
- Passages li√™n quan c√πng ch·ªß ƒë·ªÅ
- M·ªói passage kh√°c lo·∫°i vƒÉn b·∫£n
- Ng·ªØ c·∫£nh kinh doanh th·ª±c t·∫ø
- Ng√¥n ng·ªØ trang tr·ªçng, chuy√™n nghi·ªáp
- Passage d√†i 150-300 t·ª´ m·ªói c√°i
- 2-5 c√¢u h·ªèi ƒëa l·ª±a ch·ªçn
- C√¢u h·ªèi test k·ªπ nƒÉng kh√°c nhau
- ƒê√°p √°n r√µ r√†ng, kh√¥ng g√¢y nh·∫ßm l·∫´n
- Passages c√≥ th·ªÉ ƒë·ªçc ƒë·ªôc l·∫≠p ho·∫∑c li√™n k·∫øt`
        };
      default:
        return {
          title: "Template Prompt",
          template: "Ch·ªçn Part ƒë·ªÉ xem template t∆∞∆°ng ·ª©ng"
        };
    }
  };

  // Question selection handlers
  const toggleQuestionSelection = (index: number) => {
    setSelectedQuestions(prev => {
      const newSet = new Set(prev);
      if (newSet.has(index)) {
        newSet.delete(index);
      } else {
        newSet.add(index);
      }
      return newSet;
    });
  };

  const selectAllQuestions = () => {
    setSelectedQuestions(new Set(generatedQuestions.map((_, index) => index)));
  };

  const deselectAllQuestions = () => {
    setSelectedQuestions(new Set());
  };

  const isQuestionSelected = (index: number) => selectedQuestions.has(index);
  const selectedCount = selectedQuestions.size;

  const handleGenerate = async () => {
    if (!user) {
      toast({
        title: 'L·ªói',
        description: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.',
        variant: 'destructive'
      });
      return;
    }
    setLoading(true);
    setError(null);
    setProgress(0);
    setGeneratedQuestions([]);
    setSelectedQuestions(new Set());

    try {
      let result;

      // Simulate progress
      const progressInterval = setInterval(() => {
        setProgress(prev => Math.min(prev + 10, 90));
      }, 200);

      // Always use Groq AI service
      const service = questionGeneratorService;

      // Special handling for Part 6
      if (formData.part === 6) {
        if (!formData.content.trim()) {
          throw new Error('Vui l√≤ng nh·∫≠p n·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi Part 6');
        }
        
        const part6Result = await service.generatePart6Questions({
          content: formData.content,
          type: 'reading' as DrillType,
          difficulty: formData.difficulty as Difficulty,
          questionCount: 4, // Part 6 always has 4 questions
          language: formData.language
        });

        if (part6Result.success && part6Result.passage && part6Result.questions) {
          setPart6Result({
            passage: part6Result.passage,
            questions: part6Result.questions
          });
          setGeneratedQuestions(part6Result.questions);
          toast({
            title: 'Th√†nh c√¥ng!',
            description: `ƒê√£ t·∫°o passage v√† ${part6Result.questions.length} c√¢u h·ªèi Part 6.`
          });
        } else {
          console.error('Part 6 generation failed:', part6Result);
          throw new Error(part6Result.error || 'Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi Part 6. Vui l√≤ng th·ª≠ l·∫°i.');
        }
        return;
      }

      // Special handling for Part 7
      if (formData.part === 7) {
        if (!formData.content.trim()) {
          throw new Error('Vui l√≤ng nh·∫≠p n·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi Part 7');
        }
        
        console.log('üîç DEBUG: Part 7 passageCount:', passageCount);
        
        const part7Result = await service.generatePart7Questions({
          content: formData.content,
          type: 'reading' as DrillType,
          difficulty: formData.difficulty as Difficulty,
          questionCount: formData.questionCount,
          language: formData.language,
          passageCount: passageCount
        });

        if (part7Result.success && part7Result.passages && part7Result.questions) {
          setPart7Result({
            passages: part7Result.passages,
            questions: part7Result.questions
          });
          setGeneratedQuestions(part7Result.questions);
          toast({
            title: 'Th√†nh c√¥ng!',
            description: `ƒê√£ t·∫°o ${part7Result.passages.length} passage v√† ${part7Result.questions.length} c√¢u h·ªèi Part 7.`
          });
        } else {
          console.error('Part 7 generation failed:', part7Result);
          throw new Error(part7Result.error || 'Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi Part 7. Vui l√≤ng th·ª≠ l·∫°i.');
        }
        return;
      }

      switch (activeTab) {
        case 'text':
          if (!formData.content.trim()) {
            throw new Error('Vui l√≤ng nh·∫≠p n·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi');
          }
          result = await service.generateQuestions({
            content: formData.content,
            type: formData.type as DrillType,
            difficulty: formData.difficulty as Difficulty,
            questionCount: formData.questionCount,
            language: formData.language
          });
          break;

        case 'file':
          if (!file) {
            throw new Error('Vui l√≤ng ch·ªçn file ƒë·ªÉ t·∫°o c√¢u h·ªèi');
          }
          result = await service.generateFromFile(file, {
            type: formData.type as DrillType,
            difficulty: formData.difficulty as Difficulty,
            questionCount: formData.questionCount,
            language: formData.language
          });
          break;

        case 'url':
          if (!url.trim()) {
            throw new Error('Vui l√≤ng nh·∫≠p URL ƒë·ªÉ t·∫°o c√¢u h·ªèi');
          }
          result = await service.generateFromUrl(url, {
            type: formData.type as DrillType,
            difficulty: formData.difficulty as Difficulty,
            questionCount: formData.questionCount,
            language: formData.language
          });
          break;
      }

      clearInterval(progressInterval);
      setProgress(100);

      if (result.success && result.questions.length > 0) {
        setGeneratedQuestions(result.questions);
        toast({
          title: 'Th√†nh c√¥ng!',
          description: `ƒê√£ t·∫°o ${result.questions.length} c√¢u h·ªèi t·ª´ n·ªôi dung.`
        });
      } else {
        throw new Error(result.error || 'Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi');
      }

    } catch (error) {
      setError(error instanceof Error ? error.message : 'C√≥ l·ªói x·∫£y ra');
      toast({
        title: 'L·ªói',
        description: error instanceof Error ? error.message : 'C√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u h·ªèi',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
      setProgress(0);
    }
  };

  const handleSaveQuestions = async () => {
    if (!user || generatedQuestions.length === 0) return;

    // Check if Part 7 requires passage
    if (formData.part === 7) {
      toast({
        title: 'L·ªói',
        description: 'Part 7 c·∫ßn c√≥ passage. Vui l√≤ng t·∫°o passage tr∆∞·ªõc ho·∫∑c ch·ªçn Part kh√°c.',
        variant: 'destructive'
      });
      return;
    }

    // Special handling for Part 6
    if (formData.part === 6 && part6Result) {
      try {
        // First create the passage
        const { data: passageData, error: passageError } = await supabase
          .from('passages')
          .insert({
            part: 6,
            passage_type: 'single',
            texts: {
              content: part6Result.passage.content
            },
            created_by: user.id
          })
          .select()
          .single();

        if (passageError) {
          throw passageError;
        }

        // Then create questions with passage_id
        const questionsToSave = part6Result.questions.map((q, index) => ({
          part: 6,
          passage_id: passageData.id,
          blank_index: index + 1,
          prompt_text: `Blank ${index + 1}`, // Simple prompt for Part 6
          choices: q.choices,
          correct_choice: q.answer,
          explain_vi: q.explain_vi,
          explain_en: q.explain_en,
          difficulty: formData.difficulty === 'mix' ? 'medium' : formData.difficulty,
          status: 'published',
          created_by: user.id,
          tags: q.tags,
          audio_url: null,
          transcript: null,
          image_url: null
        }));

        const { error: questionsError } = await supabase
          .from('questions')
          .insert(questionsToSave);

        if (questionsError) {
          throw questionsError;
        }

        toast({
          title: 'Th√†nh c√¥ng!',
          description: `ƒê√£ t·∫°o passage v√† ${questionsToSave.length} c√¢u h·ªèi Part 6 v√†o h·ªá th·ªëng.`
        });

        // Reset
        setPart6Result(null);
        setGeneratedQuestions([]);
        setSelectedQuestions(new Set());

      } catch (error) {
        toast({
          title: 'L·ªói',
          description: 'Kh√¥ng th·ªÉ l∆∞u c√¢u h·ªèi Part 6. Vui l√≤ng th·ª≠ l·∫°i.',
          variant: 'destructive'
        });
      }
      return;
    }

    // Special handling for Part 7
    if (formData.part === 7 && part7Result) {
      try {
        // Create passages first
        const passageDataArray = [];
        for (const passage of part7Result.passages) {
          const { data: passageData, error: passageError } = await supabase
            .from('passages')
            .insert({
              part: 7,
              passage_type: 'single',
              texts: {
                content: passage.content,
                type: passage.type,
                title: passage.title
              },
              created_by: user.id
            })
            .select()
            .single();

          if (passageError) {
            throw passageError;
          }
          passageDataArray.push(passageData);
        }

        // Then create questions with passage_id
        const questionsToSave = part7Result.questions.map((q, index) => ({
          part: 7,
          passage_id: passageDataArray[0].id, // Use first passage for all questions
          prompt_text: q.question,
          choices: q.choices,
          correct_choice: q.answer,
          explain_vi: q.explain_vi,
          explain_en: q.explain_en,
          difficulty: formData.difficulty === 'mix' ? 'medium' : formData.difficulty,
          status: 'published',
          created_by: user.id,
          tags: q.tags,
          audio_url: null,
          transcript: null,
          image_url: null
        }));

        const { error: questionsError } = await supabase
          .from('questions')
          .insert(questionsToSave);

        if (questionsError) {
          throw questionsError;
        }

        toast({
          title: 'Th√†nh c√¥ng!',
          description: `ƒê√£ t·∫°o ${passageDataArray.length} passage v√† ${questionsToSave.length} c√¢u h·ªèi Part 7 v√†o h·ªá th·ªëng.`
        });

        // Reset
        setPart7Result(null);
        setGeneratedQuestions([]);
        setSelectedQuestions(new Set());

      } catch (error) {
        toast({
          title: 'L·ªói',
          description: 'Kh√¥ng th·ªÉ l∆∞u c√¢u h·ªèi Part 7. Vui l√≤ng th·ª≠ l·∫°i.',
          variant: 'destructive'
        });
      }
      return;
    }

    try {
      const questionsToSave = generatedQuestions.map(q => ({
        part: formData.part,
        prompt_text: q.question,
        choices: q.choices,
        correct_choice: q.answer,
        explain_vi: q.explain_vi,
        explain_en: q.explain_en,
        difficulty: formData.difficulty === 'mix' ? 'medium' : formData.difficulty,
        status: 'published',
        created_by: user.id,
        tags: q.tags,
        audio_url: null,
        transcript: null,
        image_url: null,
        passage_id: null,
        blank_index: null
      }));

      const { error } = await supabase
        .from('questions')
        .insert(questionsToSave);

      if (error) {
        throw error;
      }

      toast({
        title: 'Th√†nh c√¥ng!',
        description: `ƒê√£ l∆∞u ${questionsToSave.length} c√¢u h·ªèi v√†o h·ªá th·ªëng.`
      });

      // Notify parent component
      if (onQuestionsGenerated) {
        onQuestionsGenerated(questionsToSave as unknown as Question[]);
      }

      // Reset form
      setGeneratedQuestions([]);
      setSelectedQuestions(new Set());
      setFormData({
        content: '',
        type: 'mix',
        difficulty: 'medium',
        questionCount: 5,
        language: 'vi',
        part: 5
      });

    } catch (error) {
      toast({
        title: 'L·ªói',
        description: 'Kh√¥ng th·ªÉ l∆∞u c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i.',
        variant: 'destructive'
      });
    }
  };

  const handleSaveSelectedQuestions = async () => {
    if (!user || selectedCount === 0) return;

    try {
      const selectedQuestionsData = Array.from(selectedQuestions).map(index => generatedQuestions[index]);
      
      const questionsToSave = selectedQuestionsData.map(q => ({
        part: formData.part,
        prompt_text: q.question,
        choices: q.choices,
        correct_choice: q.answer,
        explain_vi: q.explain_vi,
        explain_en: q.explain_en,
        difficulty: formData.difficulty === 'mix' ? 'medium' : formData.difficulty,
        status: 'published',
        created_by: user.id,
        tags: q.tags,
        audio_url: null,
        transcript: null,
        image_url: null,
        passage_id: null,
        blank_index: null
      }));

      const { error } = await supabase
        .from('questions')
        .insert(questionsToSave);

      if (error) {
        throw error;
      }

      toast({
        title: 'Th√†nh c√¥ng!',
        description: `ƒê√£ l∆∞u ${questionsToSave.length} c√¢u h·ªèi ƒë√£ ch·ªçn v√†o h·ªá th·ªëng.`
      });

      // Notify parent component
      if (onQuestionsGenerated) {
        onQuestionsGenerated(questionsToSave as unknown as Question[]);
      }

      // Remove saved questions from the list
      const remainingQuestions = generatedQuestions.filter((_, index) => !selectedQuestions.has(index));
      setGeneratedQuestions(remainingQuestions);
      setSelectedQuestions(new Set());

    } catch (error) {
      toast({
        title: 'L·ªói',
        description: 'Kh√¥ng th·ªÉ l∆∞u c√¢u h·ªèi ƒë√£ ch·ªçn. Vui l√≤ng th·ª≠ l·∫°i.',
        variant: 'destructive'
      });
    }
  };

  const handleCopyQuestion = (question: GeneratedQuestion) => {
    const text = `C√¢u h·ªèi: ${question.question}\n\nL·ª±a ch·ªçn:\nA. ${question.choices[0]}\nB. ${question.choices[1]}\nC. ${question.choices[2]}\nD. ${question.choices[3]}\n\nƒê√°p √°n: ${question.answer}\n\nGi·∫£i th√≠ch (VI): ${question.explain_vi}\nGi·∫£i th√≠ch (EN): ${question.explain_en}`;
    
    navigator.clipboard.writeText(text).then(() => {
      toast({
        title: 'ƒê√£ sao ch√©p',
        description: 'C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard.'
      });
    });
  };

  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setFile(file);
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <Card className="border-gradient bg-gradient-to-r from-blue-50 to-purple-50">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-3 text-2xl">
                <div className="p-2 rounded-lg bg-gradient-to-r from-blue-500 to-purple-600 text-white">
                  <Sparkles className="h-6 w-6" />
                </div>
                T·∫°o c√¢u h·ªèi TOEIC th√¥ng minh
              </CardTitle>
              <CardDescription className="text-base mt-2">
                üöÄ S·ª≠ d·ª•ng Groq AI ƒë·ªÉ t·∫°o c√¢u h·ªèi TOEIC ch·∫•t l∆∞·ª£ng cao t·ª´ vƒÉn b·∫£n, file ho·∫∑c URL
                <br />
                ‚ú® H·ªó tr·ª£ nhi·ªÅu lo·∫°i c√¢u h·ªèi: T·ª´ v·ª±ng, Ng·ªØ ph√°p, Nghe hi·ªÉu, ƒê·ªçc hi·ªÉu
                <br />
                üîë C·∫ßn c·∫•u h√¨nh Groq API Key (mi·ªÖn ph√≠ t·∫°i console.groq.com)
              </CardDescription>
            </div>
            <Button
              onClick={() => setShowPromptGuide(true)}
              variant="outline"
              className="flex items-center gap-2 bg-white hover:bg-gray-50"
            >
              <HelpCircle className="h-4 w-4" />
              H∆∞·ªõng d·∫´n Prompt
            </Button>
          </div>
        </CardHeader>
      </Card>

      {/* Configuration */}
      <Card>
        <CardHeader>
          <CardTitle>C·∫•u h√¨nh t·∫°o c√¢u h·ªèi</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Groq AI Info */}
          <div className="relative p-6 border-2 rounded-xl border-blue-200 bg-gradient-to-r from-blue-50 to-indigo-50 shadow-lg">
            <div className="flex items-center gap-4">
              <div className="p-3 rounded-xl bg-gradient-to-r from-blue-500 to-indigo-600 text-white">
                <Sparkles className="h-6 w-6" />
              </div>
              <div className="flex-1">
                <div className="flex items-center gap-3">
                  <h3 className="text-lg font-semibold">Groq AI-Powered Generation</h3>
                  <Badge className="text-xs font-medium bg-blue-100 text-blue-800 border-blue-200">
                    Powered by Groq
                  </Badge>
                  <Badge className="text-xs font-medium bg-green-100 text-green-800 border-green-200">
                    <Gift className="h-3 w-3 mr-1" />
                    Mi·ªÖn ph√≠
                  </Badge>
                </div>
                <p className="text-sm text-muted-foreground mt-1">
                  S·ª≠ d·ª•ng Groq AI ƒë·ªÉ t·∫°o c√¢u h·ªèi ch·∫•t l∆∞·ª£ng cao - Ho√†n to√†n mi·ªÖn ph√≠
                </p>
              </div>
            </div>
          </div>

          {/* API Status */}
          <div className="p-4 border rounded-lg bg-gray-50">
            <div className="flex items-center justify-between mb-3">
              <h4 className="font-semibold text-gray-800">Tr·∫°ng th√°i k·∫øt n·ªëi AI</h4>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded-full bg-green-500"></div>
                <span className="text-sm font-medium text-green-700">ƒê√£ c·∫•u h√¨nh</span>
              </div>
            </div>
            <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
              <p className="text-sm text-green-800">
                <strong>‚úÖ Groq AI ƒë√£ s·∫µn s√†ng:</strong> B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng t·∫°o c√¢u h·ªèi b·∫±ng AI ngay b√¢y gi·ªù!
              </p>
              <p className="text-xs text-green-700 mt-1">
                S·ª≠ d·ª•ng m√¥ h√¨nh llama-3.1-8b-instant ƒë·ªÉ t·∫°o c√¢u h·ªèi ch·∫•t l∆∞·ª£ng cao
              </p>
            </div>
          </div>

          <Alert className="border-blue-200 bg-blue-50">
            <div className="flex items-start gap-3">
              <div className="p-1 rounded-lg bg-blue-100">
                <Zap className="h-4 w-4 text-blue-600" />
              </div>
              <div className="flex-1">
                <AlertDescription className="text-blue-800">
                  <strong>ü§ñ Groq AI:</strong> S·ª≠ d·ª•ng m√¥ h√¨nh llama-3.1-8b-instant ƒë·ªÉ t·∫°o c√¢u h·ªèi ch·∫•t l∆∞·ª£ng cao
                  <br />
                  <span className="text-sm">‚Ä¢ C·∫ßn c·∫•u h√¨nh API key (mi·ªÖn ph√≠ t·∫°i console.groq.com)</span>
                  <br />
                  <span className="text-sm">‚Ä¢ T·∫°o c√¢u h·ªèi ƒëa d·∫°ng v√† ph√π h·ª£p v·ªõi n·ªôi dung</span>
                  <br />
                  <span className="text-sm">‚Ä¢ H·ªó tr·ª£ t·∫•t c·∫£ lo·∫°i c√¢u h·ªèi TOEIC</span>
                  <br />
                  <span className="text-sm">‚Ä¢ T·ªëc ƒë·ªô x·ª≠ l√Ω nhanh v√† ·ªïn ƒë·ªãnh</span>
                </AlertDescription>
              </div>
            </div>
          </Alert>

          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div className="space-y-3">
              <Label className="text-sm font-semibold flex items-center gap-2">
                <Target className="h-4 w-4" />
                Part TOEIC
              </Label>
              <Select
                value={formData.part.toString()}
                onValueChange={(value) => setFormData(prev => ({ ...prev, part: parseInt(value) }))}
              >
                <SelectTrigger className="h-12">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">üì∏ Part 1 - Photos</SelectItem>
                  <SelectItem value="2">‚ùì Part 2 - Question-Response</SelectItem>
                  <SelectItem value="3">üí¨ Part 3 - Conversations</SelectItem>
                  <SelectItem value="4">üì¢ Part 4 - Talks</SelectItem>
                  <SelectItem value="5">üìù Part 5 - Incomplete Sentences</SelectItem>
                  <SelectItem value="6">üìÑ Part 6 - Text Completion (AI t·∫°o passage)</SelectItem>
                  <SelectItem value="7">üìñ Part 7 - Reading Comprehension (AI t·∫°o passage)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-3">
              <Label className="text-sm font-semibold flex items-center gap-2">
                <Target className="h-4 w-4" />
                Lo·∫°i c√¢u h·ªèi
              </Label>
              <Select
                value={formData.type}
                onValueChange={(value) => setFormData(prev => ({ ...prev, type: value as DrillType | 'mix' }))}
              >
                <SelectTrigger className="h-12">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="mix">üéØ H·ªón h·ª£p</SelectItem>
                  <SelectItem value="vocab">üìö T·ª´ v·ª±ng</SelectItem>
                  <SelectItem value="grammar">üìù Ng·ªØ ph√°p</SelectItem>
                  <SelectItem value="listening">üéß Nghe hi·ªÉu (d·ª±a tr√™n transcript)</SelectItem>
                  <SelectItem value="reading">üìñ ƒê·ªçc hi·ªÉu</SelectItem>
                </SelectContent>
              </Select>
              {formData.type === 'listening' && (
                <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <p className="text-sm text-blue-800">
                    <strong>üí° L∆∞u √Ω:</strong> C√¢u h·ªèi listening s·∫Ω ƒë∆∞·ª£c t·∫°o d·ª±a tr√™n transcript (vƒÉn b·∫£n) b·∫°n cung c·∫•p. 
                    AI s·∫Ω t·∫°o c√°c t√¨nh hu·ªëng nghe hi·ªÉu th·ª±c t·∫ø nh∆∞ h·ªôi tho·∫°i, th√¥ng b√°o, b√†i thuy·∫øt tr√¨nh.
                  </p>
                </div>
              )}
              {formData.type === 'reading' && (
                <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                  <p className="text-sm text-green-800">
                    <strong>üìñ Part 5 - Incomplete Sentences:</strong> AI s·∫Ω t·∫°o c√¢u h·ªèi ho√†n th√†nh c√¢u theo format TOEIC chu·∫©n. 
                    T·∫≠p trung v√†o ng·ªØ ph√°p, t·ª´ v·ª±ng trong ng·ªØ c·∫£nh kinh doanh v√† c√¥ng vi·ªác.
                  </p>
                </div>
              )}
              
              {/* Part 6 Notice */}
              {formData.part === 6 && (
                <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                  <p className="text-sm text-green-800">
                    <strong>üìÑ Part 6 - Text Completion:</strong> AI s·∫Ω t·∫°o passage c√≥ 4 ch·ªó tr·ªëng v√† 4 c√¢u h·ªèi t∆∞∆°ng ·ª©ng. 
                    Passage s·∫Ω c√≥ ng·ªØ c·∫£nh kinh doanh th·ª±c t·∫ø nh∆∞ email, memo, b√°o c√°o.
                  </p>
                </div>
              )}

              {/* Part 7 Passage Count Selection */}
              {formData.part === 7 && (
                <div className="p-3 bg-orange-50 border border-orange-200 rounded-lg">
                  <div className="flex items-center gap-2 mb-3">
                    <FileText className="h-4 w-4 text-orange-600" />
                    <span className="text-sm font-semibold text-orange-800">S·ªë l∆∞·ª£ng Passages:</span>
                  </div>
                  <div className="flex gap-2">
                    {[1, 2, 3].map((count) => (
                      <Button
                        key={count}
                        variant={passageCount === count ? "default" : "outline"}
                        size="sm"
                        onClick={() => setPassageCount(count)}
                        className="text-xs"
                      >
                        {count} Passage{count > 1 ? 's' : ''}
                      </Button>
                    ))}
                  </div>
                  <p className="text-xs text-orange-700 mt-2">
                    AI s·∫Ω t·∫°o {passageCount} passage{passageCount > 1 ? 's' : ''} li√™n quan v√† c√¢u h·ªèi t∆∞∆°ng ·ª©ng
                  </p>
                </div>
              )}

              {/* Template Prompt Button */}
              {[5, 6, 7].includes(formData.part) && (
                <div className="p-3 bg-purple-50 border border-purple-200 rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <FileText className="h-4 w-4 text-purple-600" />
                      <span className="text-sm font-semibold text-purple-800">
                        Template Prompt cho {getPartTemplate(formData.part).title}:
                      </span>
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setShowTemplate(!showTemplate)}
                      className="text-xs"
                    >
                      {showTemplate ? <ChevronUp className="h-3 w-3 mr-1" /> : <ChevronDown className="h-3 w-3 mr-1" />}
                      {showTemplate ? '·∫®n' : 'Hi·ªán'} Template
                    </Button>
                  </div>
                  
                  {showTemplate && (
                    <div className="bg-white p-3 rounded border text-xs font-mono text-gray-700 leading-relaxed">
                      <pre className="whitespace-pre-wrap">{getPartTemplate(formData.part).template}</pre>
                    </div>
                  )}
                  
                  <div className="mt-2 flex justify-end">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        navigator.clipboard.writeText(getPartTemplate(formData.part).template);
                        toast({
                          title: 'ƒê√£ copy!',
                          description: 'Template prompt ƒë√£ ƒë∆∞·ª£c copy v√†o clipboard.'
                        });
                      }}
                      className="text-xs"
                    >
                      <Copy className="h-3 w-3 mr-1" />
                      Copy Template
                    </Button>
                  </div>
                </div>
              )}

            </div>

            <div className="space-y-3">
              <Label className="text-sm font-semibold flex items-center gap-2">
                <Zap className="h-4 w-4" />
                ƒê·ªô kh√≥
              </Label>
              <Select
                value={formData.difficulty}
                onValueChange={(value) => setFormData(prev => ({ ...prev, difficulty: value as Difficulty | 'mix' }))}
              >
                <SelectTrigger className="h-12">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="mix">üé≤ H·ªón h·ª£p</SelectItem>
                  <SelectItem value="easy">üü¢ D·ªÖ (400-500 ƒëi·ªÉm)</SelectItem>
                  <SelectItem value="medium">üü° Trung b√¨nh (500-700 ƒëi·ªÉm)</SelectItem>
                  <SelectItem value="hard">üî¥ Kh√≥ (700+ ƒëi·ªÉm)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-3">
              <Label className="text-sm font-semibold flex items-center gap-2">
                <FileText className="h-4 w-4" />
                S·ªë c√¢u h·ªèi
              </Label>
              <Select
                value={formData.questionCount.toString()}
                onValueChange={(value) => setFormData(prev => ({ ...prev, questionCount: parseInt(value) }))}
              >
                <SelectTrigger className="h-12">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="3">üìù 3 c√¢u</SelectItem>
                  <SelectItem value="5">üìÑ 5 c√¢u</SelectItem>
                  <SelectItem value="10">üìã 10 c√¢u</SelectItem>
                  <SelectItem value="15">üìä 15 c√¢u</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-3">
            <Label className="text-sm font-semibold flex items-center gap-2">
              <Globe className="h-4 w-4" />
              Ng√¥n ng·ªØ gi·∫£i th√≠ch
            </Label>
            <Select
              value={formData.language}
              onValueChange={(value) => setFormData(prev => ({ ...prev, language: value as 'vi' | 'en' }))}
            >
              <SelectTrigger className="w-64 h-12">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="vi">üáªüá≥ Ti·∫øng Vi·ªát chi ti·∫øt</SelectItem>
                <SelectItem value="en">üá∫üá∏ Ti·∫øng Anh chi ti·∫øt</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Content Input */}
      <Card>
        <CardHeader>
          <CardTitle>Ngu·ªìn n·ªôi dung</CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'text' | 'file' | 'url')}>
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="text" className="flex items-center gap-2">
                <FileText className="h-4 w-4" />
                VƒÉn b·∫£n
              </TabsTrigger>
              <TabsTrigger value="file" className="flex items-center gap-2">
                <Upload className="h-4 w-4" />
                File
              </TabsTrigger>
              <TabsTrigger value="url" className="flex items-center gap-2">
                <Link className="h-4 w-4" />
                URL
              </TabsTrigger>
            </TabsList>

            <TabsContent value="text" className="space-y-4">
              <div className="space-y-2">
                <Label>N·ªôi dung vƒÉn b·∫£n</Label>
                <Textarea
                  placeholder="Nh·∫≠p ho·∫∑c d√°n n·ªôi dung vƒÉn b·∫£n ƒë·ªÉ t·∫°o c√¢u h·ªèi..."
                  value={formData.content}
                  onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}
                  rows={8}
                />
                <p className="text-sm text-muted-foreground">
                  {formData.content.length} k√Ω t·ª±
                </p>
              </div>
            </TabsContent>

            <TabsContent value="file" className="space-y-4">
              <div className="space-y-2">
                <Label>Ch·ªçn file</Label>
                <Input
                  type="file"
                  accept=".txt,.md,.doc,.docx"
                  onChange={handleFileChange}
                />
                {file && (
                  <div className="flex items-center gap-2 text-sm text-muted-foreground">
                    <FileText className="h-4 w-4" />
                    {file.name} ({(file.size / 1024).toFixed(1)} KB)
                  </div>
                )}
              </div>
            </TabsContent>

            <TabsContent value="url" className="space-y-4">
              <div className="space-y-2">
                <Label>URL</Label>
                <Input
                  placeholder="https://example.com/article"
                  value={url}
                  onChange={(e) => setUrl(e.target.value)}
                />
                <p className="text-sm text-muted-foreground">
                  Nh·∫≠p URL c·ªßa b√†i vi·∫øt ho·∫∑c trang web ƒë·ªÉ t·∫°o c√¢u h·ªèi
                </p>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* Generate Button */}
      <Card className="border-2 border-dashed border-primary/20 bg-gradient-to-r from-primary/5 to-purple-500/5">
        <CardContent className="pt-6">
          <div className="text-center space-y-4">
            <div className="space-y-2">
              <h3 className="text-lg font-semibold flex items-center justify-center gap-2">
                <Sparkles className="h-5 w-5 text-blue-500" />
                T·∫°o c√¢u h·ªèi b·∫±ng Groq AI
                <Badge className="text-xs bg-green-100 text-green-800">
                  <Gift className="h-3 w-3 mr-1" />
                  Mi·ªÖn ph√≠
                </Badge>
              </h3>
              <p className="text-sm text-muted-foreground">
                S·∫Ω t·∫°o {formData.questionCount} c√¢u h·ªèi {formData.type} {formData.difficulty} b·∫±ng Groq AI
              </p>
            </div>
            
            <Button 
              onClick={handleGenerate} 
              disabled={loading}
              className="w-full h-14 text-lg font-semibold transition-all duration-300 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 disabled:bg-gray-400"
              size="lg"
            >
              {loading ? (
                <div className="flex items-center gap-3">
                  <Loader2 className="h-5 w-5 animate-spin" />
                  <span>ƒêang t·∫°o c√¢u h·ªèi...</span>
                </div>
              ) : (
                <div className="flex items-center gap-3">
                  <Sparkles className="h-5 w-5" />
                  <span>T·∫°o c√¢u h·ªèi ({formData.questionCount} c√¢u)</span>
                </div>
              )}
            </Button>

            {loading && (
              <div className="space-y-3">
                <div className="relative">
                  <Progress value={progress} className="h-3 rounded-full" />
                  <div className="absolute inset-0 flex items-center justify-center">
                    <span className="text-xs font-medium text-white">
                      {progress}%
                    </span>
                  </div>
                </div>
                <div className="flex items-center justify-center gap-2 text-sm text-muted-foreground">
                  <Loader2 className="h-4 w-4 animate-spin" />
                  <span>ƒêang x·ª≠ l√Ω n·ªôi dung v√† t·∫°o c√¢u h·ªèi...</span>
                </div>
              </div>
            )}

          </div>
        </CardContent>
      </Card>

      {/* Error Display */}
      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {/* Part 6 Passage */}
      {part6Result && (
        <Card className="border-purple-200 bg-gradient-to-r from-purple-50 to-indigo-50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-purple-700">
              <FileText className="h-5 w-5" />
              Passage Part 6 - Text Completion
            </CardTitle>
            <CardDescription>
              ƒêo·∫°n vƒÉn c√≥ 4 ch·ªó tr·ªëng ƒë·ªÉ ƒëi·ªÅn t·ª´ ph√π h·ª£p
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="bg-white p-4 rounded-lg border">
              <pre className="whitespace-pre-wrap text-sm leading-relaxed">
                {part6Result.passage.content}
              </pre>
            </div>
            <div className="mt-3 flex items-center gap-2 text-sm text-purple-600">
              <Target className="h-4 w-4" />
              <span>4 ch·ªó tr·ªëng: {part6Result.passage.blanks.join(', ')}</span>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Part 6 Answer Choices */}
      {part6Result && part6Result.questions.length > 0 && (
        <Card className="border-blue-200 bg-gradient-to-r from-blue-50 to-cyan-50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-blue-700">
              <Target className="h-5 w-5" />
              Answer Choices for Part 6
            </CardTitle>
            <CardDescription>
              Ch·ªçn ƒë√°p √°n ƒë√∫ng cho t·ª´ng ch·ªó tr·ªëng
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {part6Result.questions.map((q, index) => (
                <div key={index} className="bg-white p-4 rounded-lg border">
                  <div className="flex items-center gap-2 mb-3">
                    <Badge variant="outline" className="bg-blue-100 text-blue-700">
                      Blank {q.question.split(' ')[1]}
                    </Badge>
                    <span className="text-sm text-gray-600">Choose the correct answer:</span>
                  </div>
                  <div className="grid grid-cols-2 gap-2">
                    {q.choices.map((choice, choiceIndex) => (
                      <div key={choiceIndex} className="flex items-center gap-2 p-2 rounded border">
                        <span className="font-mono text-sm font-bold text-blue-600">
                          {String.fromCharCode(65 + choiceIndex)}
                        </span>
                        <span className="text-sm">{choice}</span>
                        {choiceIndex === 0 && (
                          <Badge variant="secondary" className="ml-auto text-xs">
                            Correct
                          </Badge>
                        )}
                      </div>
                    ))}
                  </div>
                  <div className="mt-3 text-xs text-gray-600">
                    <strong>Gi·∫£i th√≠ch:</strong> {q.explain_vi}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Part 7 Passages */}
      {part7Result && (
        <Card className="border-purple-200 bg-gradient-to-r from-purple-50 to-indigo-50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-purple-700">
              <FileText className="h-5 w-5" />
              Passages Part 7 - Reading Comprehension
            </CardTitle>
            <CardDescription>
              ƒêo·∫°n vƒÉn ƒë·ªçc hi·ªÉu v·ªõi c√¢u h·ªèi tr·∫Øc nghi·ªám
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {part7Result.passages.map((passage, index) => (
                <div key={index} className="bg-white p-4 rounded-lg border">
                  <div className="flex items-center gap-2 mb-3">
                    <Badge variant="outline" className="bg-purple-100 text-purple-700">
                      Passage {index + 1}
                    </Badge>
                    <Badge variant="secondary" className="text-xs">
                      {passage.type}
                    </Badge>
                    {passage.title && (
                      <span className="text-sm font-medium text-gray-600">
                        {passage.title}
                      </span>
                    )}
                  </div>
                  <div className="text-sm leading-relaxed whitespace-pre-wrap">
                    {passage.content}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Generated Questions */}
      {generatedQuestions.length > 0 && (
        <Card className="border-green-200 bg-gradient-to-r from-green-50 to-emerald-50">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-lg bg-green-100">
                  <CheckCircle className="h-6 w-6 text-green-600" />
                </div>
                <div>
                  <CardTitle className="text-xl flex items-center gap-2">
                    üéâ C√¢u h·ªèi ƒë√£ t·∫°o th√†nh c√¥ng!
                    <Badge variant="secondary" className="bg-green-100 text-green-800">
                      {generatedQuestions.length} c√¢u
                    </Badge>
                  </CardTitle>
                  <CardDescription className="text-base">
                    ‚ú® Xem l·∫°i v√† ch·ªânh s·ª≠a c√¢u h·ªèi tr∆∞·ªõc khi l∆∞u v√†o h·ªá th·ªëng
                  </CardDescription>
                </div>
              </div>
              <div className="flex gap-2">
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={selectAllQuestions}
                  disabled={selectedCount === generatedQuestions.length}
                >
                  Ch·ªçn t·∫•t c·∫£
                </Button>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={deselectAllQuestions}
                  disabled={selectedCount === 0}
                >
                  B·ªè ch·ªçn t·∫•t c·∫£
                </Button>
              </div>
              <div className="flex gap-2">
                <Button 
                  onClick={handleSaveSelectedQuestions} 
                  disabled={selectedCount === 0}
                  className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400"
                >
                  <Save className="h-4 w-4" />
                  L∆∞u ƒë√£ ch·ªçn ({selectedCount})
                </Button>
                <Button 
                  onClick={handleSaveQuestions} 
                  className="flex items-center gap-2 bg-green-600 hover:bg-green-700"
                >
                  <Save className="h-4 w-4" />
                  L∆∞u t·∫•t c·∫£
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            {generatedQuestions.map((question, index) => (
              <Card key={index} className={`border-l-4 shadow-sm hover:shadow-md transition-all ${
                isQuestionSelected(index) 
                  ? 'border-l-green-500 bg-green-50' 
                  : 'border-l-blue-500'
              }`}>
                <CardContent className="pt-6">
                  <div className="space-y-4">
                    <div className="flex items-start justify-between">
                      <div className="flex items-center gap-3">
                        <div className="flex items-center gap-2">
                          <Checkbox
                            checked={isQuestionSelected(index)}
                            onCheckedChange={() => toggleQuestionSelection(index)}
                            className="w-5 h-5"
                          />
                          <div className="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center">
                            <span className="text-sm font-semibold text-blue-600">{index + 1}</span>
                          </div>
                        </div>
                        <h4 className="font-semibold text-lg">C√¢u h·ªèi {index + 1}</h4>
                        {isQuestionSelected(index) && (
                          <Badge className="bg-green-100 text-green-800">
                            ƒê√£ ch·ªçn
                          </Badge>
                        )}
                      </div>
                      <div className="flex gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleCopyQuestion(question)}
                          className="hover:bg-blue-50"
                        >
                          <Copy className="h-4 w-4 mr-1" />
                          Sao ch√©p
                        </Button>
                      </div>
                    </div>
                    
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <p className="text-base leading-relaxed">{question.question}</p>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {question.choices.map((choice, choiceIndex) => {
                        const isCorrect = choiceIndex === question.answer.charCodeAt(0) - 65;
                        return (
                          <div key={choiceIndex} className={`flex items-center gap-3 p-3 rounded-lg border-2 transition-colors ${
                            isCorrect 
                              ? 'border-green-200 bg-green-50' 
                              : 'border-gray-200 bg-white hover:bg-gray-50'
                          }`}>
                            <div className={`w-6 h-6 rounded-full flex items-center justify-center text-sm font-semibold ${
                              isCorrect 
                                ? 'bg-green-500 text-white' 
                                : 'bg-gray-200 text-gray-600'
                            }`}>
                              {String.fromCharCode(65 + choiceIndex)}
                            </div>
                            <span className={`flex-1 ${isCorrect ? 'font-medium text-green-700' : 'text-gray-700'}`}>
                              {choice}
                            </span>
                            {isCorrect && (
                              <CheckCircle className="h-5 w-5 text-green-500" />
                            )}
                          </div>
                        );
                      })}
                    </div>
                    
                    <div className="space-y-3 bg-blue-50 p-4 rounded-lg">
                      <div className="flex items-center gap-2">
                        <Badge className="bg-blue-100 text-blue-800">ƒê√°p √°n</Badge>
                        <span className="font-semibold text-blue-700">{question.answer}</span>
                      </div>
                      
                      <div className="space-y-2">
                        <div className="flex items-start gap-2">
                          <Badge variant="outline" className="bg-white">üáªüá≥ VI</Badge>
                          <div className="flex-1">
                            <p className="text-sm text-gray-700">{question.explain_vi}</p>
                          </div>
                        </div>
                        
                        <div className="flex items-start gap-2">
                          <Badge variant="outline" className="bg-white">üá∫üá∏ EN</Badge>
                          <div className="flex-1">
                            <p className="text-sm text-gray-700">{question.explain_en}</p>
                          </div>
                        </div>
                      </div>
                      
                      {question.tags.length > 0 && (
                        <div className="flex items-center gap-2 flex-wrap">
                          <Badge variant="outline" className="bg-white">Tags</Badge>
                          {question.tags.map((tag, tagIndex) => (
                            <Badge key={tagIndex} variant="secondary" className="text-xs bg-purple-100 text-purple-800">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </CardContent>
        </Card>
      )}

      {/* Prompt Guide Modal */}
      {showPromptGuide && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="sticky top-0 bg-white border-b p-6 flex items-center justify-between">
              <h2 className="text-2xl font-bold flex items-center gap-2">
                <BookOpen className="h-6 w-6 text-blue-600" />
                H∆∞·ªõng d·∫´n Prompt chu·∫©n TOEIC
              </h2>
              <Button
                onClick={() => setShowPromptGuide(false)}
                variant="ghost"
                size="sm"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
            
            <div className="p-6 space-y-6">
              {/* Introduction */}
              <div className="bg-blue-50 p-4 rounded-lg">
                <h3 className="font-semibold text-blue-800 mb-2">üéØ M·ª•c ƒë√≠ch</h3>
                <p className="text-blue-700 text-sm">
                  H∆∞·ªõng d·∫´n c√°ch prompt hi·ªáu qu·∫£ ƒë·ªÉ t·∫°o c√¢u h·ªèi TOEIC ch·∫•t l∆∞·ª£ng cao v·ªõi AI. 
                  M·ªói Part c√≥ format v√† y√™u c·∫ßu ri√™ng bi·ªát.
                </p>
              </div>

              {/* Part 1 - Photos */}
              <div className="border rounded-lg p-4">
                <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
                  üì∏ Part 1 - Photos
                </h3>
                <div className="space-y-3">
                  <div className="bg-gray-50 p-3 rounded">
                    <h4 className="font-medium text-sm mb-2">Prompt m·∫´u:</h4>
                    <code className="text-xs bg-white p-2 rounded block">
                      "T·∫°o c√¢u h·ªèi Part 1 TOEIC t·ª´ h√¨nh ·∫£nh m√¥ t·∫£: [M√¥ t·∫£ h√¨nh ·∫£nh]<br/>
                      Y√™u c·∫ßu: T·∫°o 4 c√¢u m√¥ t·∫£ h√¨nh ·∫£nh, ch·ªâ c√≥ 1 c√¢u ƒë√∫ng"
                    </code>
                  </div>
                  <div className="text-sm text-gray-600">
                    <strong>L∆∞u √Ω:</strong> Part 1 c·∫ßn h√¨nh ·∫£nh th·ª±c t·∫ø, AI Generator kh√¥ng h·ªó tr·ª£ t·∫°o c√¢u h·ªèi Part 1.
                  </div>
                </div>
              </div>

              {/* Part 2 - Question-Response */}
              <div className="border rounded-lg p-4">
                <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
                  ‚ùì Part 2 - Question-Response
                </h3>
                <div className="space-y-3">
                  <div className="bg-gray-50 p-3 rounded">
                    <h4 className="font-medium text-sm mb-2">Prompt m·∫´u:</h4>
                    <code className="text-xs bg-white p-2 rounded block">
                      "T·∫°o c√¢u h·ªèi Part 2 TOEIC t·ª´ t√¨nh hu·ªëng: [M√¥ t·∫£ t√¨nh hu·ªëng]<br/>
                      Y√™u c·∫ßu: T·∫°o 1 c√¢u h·ªèi v√† 3 c√¢u tr·∫£ l·ªùi (A, B, C), ch·ªâ c√≥ 1 c√¢u ƒë√∫ng"
                    </code>
                  </div>
                  <div className="text-sm text-gray-600">
                    <strong>L∆∞u √Ω:</strong> T·∫≠p trung v√†o h·ªôi tho·∫°i ng·∫Øn trong m√¥i tr∆∞·ªùng c√¥ng vi·ªác.
                  </div>
                </div>
              </div>

              {/* Part 3 - Conversations */}
              <div className="border rounded-lg p-4">
                <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
                  üí¨ Part 3 - Conversations
                </h3>
                <div className="space-y-3">
                  <div className="bg-gray-50 p-3 rounded">
                    <h4 className="font-medium text-sm mb-2">Prompt m·∫´u:</h4>
                    <code className="text-xs bg-white p-2 rounded block">
                      "T·∫°o c√¢u h·ªèi Part 3 TOEIC t·ª´ ƒëo·∫°n h·ªôi tho·∫°i:<br/>
                      [ƒêo·∫°n h·ªôi tho·∫°i]<br/>
                      Y√™u c·∫ßu: T·∫°o 3 c√¢u h·ªèi v·ªÅ n·ªôi dung h·ªôi tho·∫°i, m·ªói c√¢u c√≥ 4 l·ª±a ch·ªçn"
                    </code>
                  </div>
                  <div className="text-sm text-gray-600">
                    <strong>L∆∞u √Ω:</strong> C·∫ßn t·∫°o passage tr∆∞·ªõc. S·ª≠ d·ª•ng Question Creator thay v√¨ AI Generator.
                  </div>
                </div>
              </div>

              {/* Part 4 - Talks */}
              <div className="border rounded-lg p-4">
                <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
                  üì¢ Part 4 - Talks
                </h3>
                <div className="space-y-3">
                  <div className="bg-gray-50 p-3 rounded">
                    <h4 className="font-medium text-sm mb-2">Prompt m·∫´u:</h4>
                    <code className="text-xs bg-white p-2 rounded block">
                      "T·∫°o c√¢u h·ªèi Part 4 TOEIC t·ª´ b√†i n√≥i:<br/>
                      [N·ªôi dung b√†i n√≥i]<br/>
                      Y√™u c·∫ßu: T·∫°o 3 c√¢u h·ªèi v·ªÅ n·ªôi dung b√†i n√≥i, m·ªói c√¢u c√≥ 4 l·ª±a ch·ªçn"
                    </code>
                  </div>
                  <div className="text-sm text-gray-600">
                    <strong>L∆∞u √Ω:</strong> C·∫ßn t·∫°o passage tr∆∞·ªõc. S·ª≠ d·ª•ng Question Creator thay v√¨ AI Generator.
                  </div>
                </div>
              </div>

              {/* Part 5 - Incomplete Sentences */}
              <div className="border rounded-lg p-4 bg-green-50">
                <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
                  üìù Part 5 - Incomplete Sentences (AI Generator h·ªó tr·ª£)
                </h3>
                <div className="space-y-3">
                  <div className="bg-gray-50 p-3 rounded">
                    <h4 className="font-medium text-sm mb-2">Prompt m·∫´u:</h4>
                    <code className="text-xs bg-white p-2 rounded block">
                      "T·∫°o c√¢u h·ªèi Part 5 TOEIC t·ª´ n·ªôi dung:<br/>
                      [N·ªôi dung vƒÉn b·∫£n kinh doanh]<br/>
                      Y√™u c·∫ßu: T·∫°o 5 c√¢u h·ªèi ho√†n th√†nh c√¢u, t·∫≠p trung v√†o ng·ªØ ph√°p v√† t·ª´ v·ª±ng kinh doanh"
                    </code>
                  </div>
                  <div className="text-sm text-gray-600">
                    <strong>‚úÖ H·ªó tr·ª£:</strong> AI Generator c√≥ th·ªÉ t·∫°o c√¢u h·ªèi Part 5 tr·ª±c ti·∫øp.
                  </div>
                </div>
              </div>

              {/* Part 6 - Text Completion */}
              <div className="border rounded-lg p-4">
                <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
                  üìÑ Part 6 - Text Completion
                </h3>
                <div className="space-y-3">
                  <div className="bg-gray-50 p-3 rounded">
                    <h4 className="font-medium text-sm mb-2">Prompt m·∫´u:</h4>
                    <code className="text-xs bg-white p-2 rounded block">
                      "T·∫°o c√¢u h·ªèi Part 6 TOEIC t·ª´ ƒëo·∫°n vƒÉn:<br/>
                      [ƒêo·∫°n vƒÉn c√≥ ch·ªó tr·ªëng]<br/>
                      Y√™u c·∫ßu: T·∫°o 4 c√¢u h·ªèi ƒëi·ªÅn t·ª´ v√†o ch·ªó tr·ªëng, m·ªói c√¢u c√≥ 4 l·ª±a ch·ªçn"
                    </code>
                  </div>
                  <div className="text-sm text-gray-600">
                    <strong>L∆∞u √Ω:</strong> C·∫ßn t·∫°o passage tr∆∞·ªõc. S·ª≠ d·ª•ng Question Creator thay v√¨ AI Generator.
                  </div>
                </div>
              </div>

              {/* Part 7 - Reading Comprehension */}
              <div className="border rounded-lg p-4">
                <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
                  üìñ Part 7 - Reading Comprehension
                </h3>
                <div className="space-y-3">
                  <div className="bg-gray-50 p-3 rounded">
                    <h4 className="font-medium text-sm mb-2">Prompt m·∫´u:</h4>
                    <code className="text-xs bg-white p-2 rounded block">
                      "T·∫°o c√¢u h·ªèi Part 7 TOEIC t·ª´ vƒÉn b·∫£n:<br/>
                      [Email/Memo/Notice/Article]<br/>
                      Y√™u c·∫ßu: T·∫°o 5 c√¢u h·ªèi ƒë·ªçc hi·ªÉu, bao g·ªìm main idea, detail, inference"
                    </code>
                  </div>
                  <div className="text-sm text-gray-600">
                    <strong>L∆∞u √Ω:</strong> C·∫ßn t·∫°o passage tr∆∞·ªõc. S·ª≠ d·ª•ng Question Creator thay v√¨ AI Generator.
                  </div>
                </div>
              </div>

              {/* Tips */}
              <div className="bg-yellow-50 p-4 rounded-lg">
                <h3 className="font-semibold text-yellow-800 mb-2">üí° M·∫πo prompt hi·ªáu qu·∫£</h3>
                <ul className="text-yellow-700 text-sm space-y-1">
                  <li>‚Ä¢ S·ª≠ d·ª•ng ng·ªØ c·∫£nh kinh doanh v√† c√¥ng vi·ªác th·ª±c t·∫ø</li>
                  <li>‚Ä¢ Ch·ªâ ƒë·ªãnh r√µ s·ªë l∆∞·ª£ng c√¢u h·ªèi c·∫ßn t·∫°o</li>
                  <li>‚Ä¢ M√¥ t·∫£ ƒë·ªô kh√≥ ph√π h·ª£p (easy/medium/hard)</li>
                  <li>‚Ä¢ Cung c·∫•p n·ªôi dung c√≥ c·∫•u tr√∫c r√µ r√†ng</li>
                  <li>‚Ä¢ Y√™u c·∫ßu gi·∫£i th√≠ch chi ti·∫øt cho m·ªói c√¢u h·ªèi</li>
                </ul>
              </div>

              {/* AI Generator Support */}
              <div className="bg-blue-50 p-4 rounded-lg">
                <h3 className="font-semibold text-blue-800 mb-2">ü§ñ AI Generator h·ªó tr·ª£</h3>
                <div className="text-blue-700 text-sm">
                  <p><strong>‚úÖ H·ªó tr·ª£:</strong> Part 5 (Incomplete Sentences)</p>
                  <p><strong>‚ùå Kh√¥ng h·ªó tr·ª£:</strong> Part 1, 3, 4, 6, 7 (c·∫ßn passage ho·∫∑c h√¨nh ·∫£nh)</p>
                  <p><strong>‚ö†Ô∏è H·∫°n ch·∫ø:</strong> Part 2 (c√≥ th·ªÉ t·∫°o nh∆∞ng kh√¥ng t·ªëi ∆∞u)</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default QuestionGenerator;
